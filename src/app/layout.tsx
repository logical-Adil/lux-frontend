// import type { Metadata } from "next";
// import { ThemeProvider } from "@/components/theme-provider";

// import { Red_Hat_Display } from "next/font/google";
// import {
//   ColorSchemeScript,
//   MantineProvider,
//   mantineHtmlProps,
// } from "@mantine/core";
// import "@mantine/core/styles.css";
// import "./globals.css";

// // const geistSans = Geist({
// //   variable: '--font-geist-sans',
// //   subsets: ['latin'],
// // });

// // const geistMono = Geist_Mono({
// //   variable: '--font-geist-mono',
// //   subsets: ['latin'],
// // });

// const redHat = Red_Hat_Display({
//   subsets: ["latin"],
//   display: "swap",
//   variable: "--font-red-hat",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en" {...mantineHtmlProps} suppressHydrationWarning>
//       <head>
//         <ColorSchemeScript />
//       </head>
//       <body className={`${redHat.className} antialiased`}>
//         <ThemeProvider
//           attribute="class"
//           defaultTheme="system"
//           enableSystem
//           disableTransitionOnChange
//         >
//           <MantineProvider>{children}</MantineProvider>
//         </ThemeProvider>
//       </body>
//     </html>
//   );
// }

import type { Metadata } from "next";
import { Red_Hat_Display } from "next/font/google";
import { ColorSchemeScript, MantineProvider, createTheme } from "@mantine/core";
import "@mantine/core/styles.css";
import "./globals.css";

const redHat = Red_Hat_Display({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-red-hat",
});

export const metadata: Metadata = {
  title: "Lux Metallic",
  description: "Generated by create next app",
};

const theme = createTheme({
  fontFamily: "var(--font-red-hat)",
  /** Optional: customize dark colors here */
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        {/* Set default to dark mode */}
        <ColorSchemeScript defaultColorScheme="dark" />
      </head>
      <body className={`${redHat.className} antialiased`}>
        <MantineProvider
          theme={theme}
          defaultColorScheme="dark"
          withCssVariables
        >
          {children}
        </MantineProvider>
      </body>
    </html>
  );
}
